apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: clang-tidy-scan-
spec:
  entrypoint: clang-tidy-workflow
  # Use a specific service account that has access to the required secrets
  serviceAccountName: argo-workflows
  # Mount Docker config for Kaniko
  volumes:
    - name: docker-config
      secret:
        secretName: docker-config
        items:
          - key: .dockerconfigjson
            path: config.json

  # Define arguments to accept GitHub secrets
  arguments:
    parameters:
    - name: DOCKERHUB_USERNAME
    - name: DOCKERHUB_TOKEN
    - name: DATE_TAG

  templates:
    - name: clang-tidy-workflow
      dag:
        tasks:
          - name: build-image
            template: kaniko-build
            arguments:
              parameters:
              - name: DOCKERHUB_USERNAME
                value: "{{workflow.parameters.DOCKERHUB_USERNAME}}"
              - name: DOCKERHUB_TOKEN
                value: "{{workflow.parameters.DOCKERHUB_TOKEN}}"
              - name: DATE_TAG
                value: "{{workflow.parameters.DATE_TAG}}"
          - name: scan-includes
            template: scan-includes
            dependencies: [build-image]
            arguments:
              parameters:
              - name: DOCKERHUB_USERNAME
                value: "{{workflow.parameters.DOCKERHUB_USERNAME}}"
              - name: DOCKERHUB_TOKEN
                value: "{{workflow.parameters.DOCKERHUB_TOKEN}}"
              - name: DATE_TAG
                value: "{{workflow.parameters.DATE_TAG}}"
          - name: scan-cuda-source
            template: scan-cuda-source
            dependencies: [build-image]
            arguments:
              parameters:
              - name: DOCKERHUB_USERNAME
                value: "{{workflow.parameters.DOCKERHUB_USERNAME}}"
              - name: DOCKERHUB_TOKEN
                value: "{{workflow.parameters.DOCKERHUB_TOKEN}}"
              - name: DATE_TAG
                value: "{{workflow.parameters.DATE_TAG}}"
          - name: scan-test-files
            template: scan-test-files
            dependencies: [build-image]
            arguments:
              parameters:
              - name: DOCKERHUB_USERNAME
                value: "{{workflow.parameters.DOCKERHUB_USERNAME}}"
              - name: DOCKERHUB_TOKEN
                value: "{{workflow.parameters.DOCKERHUB_TOKEN}}"
              - name: DATE_TAG
                value: "{{workflow.parameters.DATE_TAG}}"

    - name: kaniko-build
      inputs:
        parameters:
        - name: DOCKERHUB_USERNAME
        - name: DOCKERHUB_TOKEN
        - name: DATE_TAG
      container:
        image: gcr.io/kaniko-project/executor:latest
        args:
          - --context=git://github.com/Gin-G/micm-ncote.git
          - --dockerfile=docker/Dockerfile.clang-tidy
          - --destination=docker.io/ncging/micm-clang-tidy:{{inputs.parameters.DATE_TAG}}
          - --cache=true
        env:
        - name: DOCKER_CONFIG
          value: /kaniko/.docker
        volumeMounts:
        - name: docker-config
          mountPath: /kaniko/.docker
        - name: kubeconfig
          mountPath: /root/.kube
          readOnly: true
      volumes:
      - name: docker-config
        emptyDir: {}
      - name: kubeconfig
        secret:
          secretName: kubeconfig-secret
          items:
          - key: config
            path: config
      initContainers:
      - name: create-docker-config
        image: busybox
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo '{
            "auths": {
              "https://index.docker.io/v1/": {
                "auth": "'$(echo -n $DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN | base64)'"
              }
            }
          }' > /kaniko/.docker/config.json
        env:
        - name: DOCKERHUB_USERNAME
          value: "{{inputs.parameters.DOCKERHUB_USERNAME}}"
        - name: DOCKERHUB_TOKEN
          value: "{{inputs.parameters.DOCKERHUB_TOKEN}}"
        - name: DATE_TAG
          value: "{{inputs.parameters.DATE_TAG}}"
        volumeMounts:
        - name: docker-config
          mountPath: /kaniko/.docker

    - name: scan-includes
      inputs:
        parameters:
        - name: DOCKERHUB_USERNAME
        - name: DOCKERHUB_TOKEN
        - name: DATE_TAG
      container:
        image: "docker.io/ncging/micm-clang-tidy:{{inputs.parameters.DATE_TAG}}"
        command: [bash, -c]
        args:
          - |
            INCLUDE_FILES=$(find include -type f \( -name '*.hpp' -o -name '*.h' -o -name '*.cuh' -o -name '*.inl' \) | grep -v jit | grep -v '.inl' | grep -v '.cuh' )
            echo "scanning include files:"
            echo ${INCLUDE_FILES} | tr " " "\n"
            time clang-tidy -p ./build/ --config-file="./.clang-tidy" \
              -header-filter=$(pwd)/include/.* \
              --extra-arg "-lcudart_static" \
              --extra-arg "-std=c++20" \
              ${INCLUDE_FILES} -- -Iinclude/ \
              -isystem ./cuda-build/_deps/json-src/include
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "8Gi"
            cpu: "4"

    - name: scan-cuda-source
      inputs:
        parameters:
        - name: DOCKERHUB_USERNAME
        - name: DOCKERHUB_TOKEN
        - name: DATE_TAG
      container:
        image: "docker.io/ncging/micm-clang-tidy:{{inputs.parameters.DATE_TAG}}"
        command: [bash, -c]
        args:
          - |
            SOURCE_FILES=$(find src -type f \( -name '*.cu' -o -name '*.hpp' -o -name '*.h' -o -name '*.cpp' \))
            echo "scanning src files:"
            echo ${SOURCE_FILES} | tr " " "\n"
            time clang-tidy -p ./cuda-build/ --config-file="./.clang-tidy" \
              -header-filter=$(pwd)/include/.* \
              --extra-arg "-lcudart_static" \
              --extra-arg "-std=c++20" \
              --extra-arg "--cuda-gpu-arch=sm_70" \
              ${SOURCE_FILES} -- -Iinclude/ \
              -isystem ./cuda-build/_deps/googletest-src/googletest/include \
              -isystem ./cuda-build/_deps/json-src/include
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "8Gi"
            cpu: "4"

    - name: scan-test-files
      inputs:
        parameters:
        - name: DOCKERHUB_USERNAME
        - name: DOCKERHUB_TOKEN
        - name: DATE_TAG
      container:
        image: "docker.io/ncging/micm-clang-tidy:{{inputs.parameters.DATE_TAG}}"
        command: [bash, -c]
        args:
          - |
            TEST_FILES=$(find test -type f \( -name '*.hpp' -o -name '*.h' -o -name '*.cpp' -o -name '*.cuh' -o -name '*.cu' \) ! -path 'test/tutorial/*'  ! -path '**/*.cuh' ! -path '**/*jit*' )
            echo "scanning test files:"
            echo ${TEST_FILES} | tr " " "\n"
            time clang-tidy -p ./cuda-build/ --config-file="./.clang-tidy" \
              -header-filter=$(pwd)/include/.* \
              --extra-arg "-lcudart_static" \
              --extra-arg "-std=c++20" \
              --extra-arg "--cuda-gpu-arch=sm_70" \
              ${TEST_FILES} -- -Iinclude/ \
              -isystem ./cuda-build/_deps/googletest-src/googletest/include \
              -isystem ./cuda-build/_deps/json-src/include
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "8Gi"
            cpu: "4"

    - name: Check Argo Workflow final status
      run: |
        echo "Workflow final status: ${{ env.WORKFLOW_STATUS }}"
        
        if [[ "${{ env.WORKFLOW_STATUS }}" != "Succeeded" ]]; then
          echo "Argo Workflow failed or errored"
          echo "Keeping workflow ${{ env.WORKFLOW_NAME }} for investigation"
          exit 1
        fi
        
        echo "Argo Workflow succeeded"

    - name: Clean up Argo Workflow
      if: success()
      run: |
        echo "Deleting Argo Workflow ${{ env.WORKFLOW_NAME }}"
        argo delete -n argo ${{ env.WORKFLOW_NAME }}
        
        # Wait for workflow and pods to be deleted
        while argo get -n argo ${{ env.WORKFLOW_NAME }} &>/dev/null; do
          echo "Waiting for workflow to be deleted..."
          sleep 5
        done
        
        echo "Workflow deleted successfully"