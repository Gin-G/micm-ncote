name: Clang-Tidy

on: [pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tidy:
    name: Run Clang-Tidy
    runs-on: gh-arc-runners-micm-runner

    steps:
      - name: Check out code, generate compile commands
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get the current date for an image tag
        id: date
        run: echo "date=$(date +'%Y-%m-%d.%H.%M')" >> $GITHUB_OUTPUT
      - name: Apt Install
        run: |
          sudo apt update && \
          sudo apt install -y curl jq

      - name: Install Argo CLI
        run: |
          # Add commands to install Argo CLI here
          curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.5.11/argo-linux-amd64.gz
          # Unzip
          gunzip argo-linux-amd64.gz
          # Make binary executable
          chmod +x argo-linux-amd64
          # Move binary to path
          sudo mv ./argo-linux-amd64 /usr/local/bin/argo

      - name: Submit Argo Workflow and stream logs
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DATE_TAG: ${{ steps.date.outputs.date }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}
          REPO_COMMIT: ${{ github.sha }}
        run: |
          workflow_name=$(argo submit -n argo argo-clang-tidy-workflow.yaml \
            -p DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME}" \
            -p DATE_TAG="${DATE_TAG}" \
            -p REPO_URL="${REPO_URL}" \
            -p REPO_COMMIT="${REPO_COMMIT}" \
            --output name)
          echo "WORKFLOW_NAME=$workflow_name" >> $GITHUB_ENV
          
          # Stream logs in real-time
          argo logs -n argo $workflow_name -f &
          log_pid=$!
          
          # Wait for workflow to complete
          while true; do
            status=$(argo get -n argo $workflow_name -o json | jq -r '.status.phase')
            if [[ "$status" == "Succeeded" || "$status" == "Failed" || "$status" == "Error" ]]; then
              break
            fi
            sleep 10
          done
          
          echo "WORKFLOW_STATUS=$status" >> $GITHUB_ENV
